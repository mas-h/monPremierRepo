Petite fiche de rappels concernant git & github :
 
 l'installation de git n'est pas énoncée ici. Personnellement, je suis sous linux, il n'y a qu'à installer les paquets dédiés, rien de compliqué.
 
 ¤ Une fois l'installation terminée, il faut que git nous reconnaisse. Pour cela, il faut taper dans la console :
 	
 	git config --global user.email "you@example.com" // On lui fourni notre adresse mail.
  	git config --global user.name "Your Name" // Notre pseudo. Ces informations sont normalement les mêmes que celles de votre compte github.

 ¤ Ensuite, faire indexer un répertoire par git : 

 	→ se placer dans le répertoire souhaité // cd monRepertoire; création d'un dossier: mkdir monDossier; création d'un fichier: touch monFichier.ext (ext = extension)
 	→ git init // à taper dans la console, le répertoire est maintenant reconnu comme un index git. A ne faire qu'une seule fois 
 	→ il faut maintenant rajouté tous les fichiers du repertoire à l'index : git add nomFichier ou git add . (ajoute tous les fichiers, attention à son utilisation)
 	→ faire son premier commit: git commit -m "monMessage" // utilisation d'un verbe conjugué d'action + nom fichier. Exemple "Ajouté rappelsGit.txt"
 
 ¤ Les commandes git utiles : 
 	http://gelendir.github.io/linuq/2014/03/08/introduction-git.html // lien intéressant.

 	ø git init : fais reconnaitre un dossier par git

 	ø git add : rajoute un dossier/fichier à l'index git 
 	ø git commit -m : permet d'enregistrer une modification avec un message la décrivant

 	* mettre à jours un fichier = git add + git commit -m comme décris plus haut. 
 	** SI juste mettre à jours un fichier DEJA INDEXE alors possibilité d'utiliser : git commit -a -m "Ajouté itinéraire dans checklist-vacances.md"
 	// L'option   -a demande à Git de mettre à jour les fichiers déjà existants dans son index.

 	ø git log : affiche la liste de tous les commits que vous avez réalisés ! Pour quitter, appuyer sur touche 'q' du clavier.

 	ø git status : permet de savoir si tout va bien ou s'il y a des choses à affectuer 

 	ø git branch : indique sur quelle branche on se situe, travaille.

 	ø git checkout -- <fichier> : annuler les modifications apportées sur le document

 	ø git checkout SHADuCommit : se positionner sur un commit 

 	ø git checkout nomBranche : se positionner sur la branche (branche principale = master )

 	ø git revert SHADuCommit : créer un nouveau commit qui fait l'inverse du précédent

 	ø git commit --amend -m "Votre nouveau message" : permet de modifier le message de votre dernier commit. POSSIBLE SEULEMENT SI commit encore non pushé sur l'origine !

 	ø git reset --hard : annule tous les changements que je n'ai pas encore commités

 	ø git clone (option HTTPS OU SSH) : copie une repository sur votre machine

 	ø git push origin master : "Envoie mes modifs dans la branche master de mon remote origin."

 	ø git pull origin master : Envoie dans mon répertoire local les dernières modifications de la branche master située sur mon remote origin (qui correspond ici à GitHub).

 ¤ Un commit c'est quoi ? 

   Un commit est une modification, un ajout, une supression, ... La somme des commit forme le projet.

   Lorsque l'on tape la commande git log, un exemple d'un commit :

 	commit a5ed860e28749a22330ab5656cd43edcd355f8eb // son SHA : son identifiant unique, qui se présente sous forme d'une longue chaîne de caractères et de nombres. 
	Author: mas-h <sam_2901@hotmail.fr> // son auteur, qui a fait le commit
	Date:   Thu May 4 19:16:11 2017 +0200 // sa date 

    Ajouté rappelsGit.txt // sa description

 ¤ Utilisation d'un remote : 

 	un remote est un backup de votre code sur une autre machine :

 		soit interne : (si vous avez la chance d'avoir plusieurs ordinateurs)
 		
 		soit externe : (grâce à des services comme GitHub ou BitBucket)
			permettra de travailler sur des projets à plusieurs, pour que tout le monde ai accès aux dernières modifications de chacun sur un remote partagé.

 ¤ Utilisation de GitHub :

 	GitHub est un service en ligne qui permet d'héberger ses repositories de code. GitHub est un outil gratuit pour héberger du code open source, et propose également des plans payants pour les projets de code privés. C'est le numéro 1 mondial et il héberge plus d'une dizaine de millions de repositories ! 

 	→ Communiquer avec d'autres développeurs et signaler des problèmes de code en déclarant des "issues" ;

    → Partager des morceaux de code en ligne à l'aide de "gists" ;

    → Proposer des modifications de code à d'autres repos en faisant des "pull requests" ;

    → Et même récupérer du code depuis un autre repository.

    ø Créer repository : 

    	Cliquez sur le bouton "Create new" symbolisé par un signe "+" en haut à droite de votre écran, puis "New repository". 

		GitHub vous demandera alors de préciser quelques détails sur votre repository:

   			→ son nom

   			→ sa description

    		→ son statut public ou privé. Ici, nous partageons du code open-source, c'est donc public et gratuit 